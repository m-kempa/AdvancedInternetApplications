{"version":3,"sources":["header/Header.js","item/Item.js","items/Items.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","React","Component","Item","props","state","id","content","image","name","description","rating","edit","this","onSave","setState","event","target","value","Math","max","className","type","placeholder","onChange","imageChange","bind","src","alt","nameChange","descriptionChange","min","ratingChange","onClick","onRemove","Items","saveRow","row","items","findIndex","item","removeRow","filter","data","search","messageName","messageRating","sortName","sortRating","length","reduce","a","b","push","sort","console","log","sortByName","sortByRating","searchChange","toLowerCase","includes","map","addRow","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56965174.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Header.css'\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return <header><h1>Film List</h1>\r\n        <h3>List of Christopher Nolan's best movies </h3></header>\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nimport \"./Item.css\";\r\n\r\nclass Item extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: this.props.content.id,\r\n      image: this.props.content.image,\r\n      name: this.props.content.name,\r\n      description: this.props.content.description,\r\n      rating: this.props.content.rating\r\n    };\r\n\r\n    //So that when adding a new movie, there are editable fields immediately.\r\n    this.state.edit = this.state.name === '' || this.state.description === '';\r\n  }\r\n\r\n  edit() {\r\n    if (this.state.edit){\r\n      this.props.onSave({id: this.state.id, image: this.state.image, name: this.state.name,\r\n        description: this.state.description, rating: this.state.rating});\r\n    }\r\n    \r\n    this.setState({ edit: !this.state.edit });  \r\n  }\r\n\r\n  imageChange(event) {\r\n    this.setState({image: event.target.value})\r\n  }\r\n\r\n  nameChange(event) {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n\r\n  descriptionChange(event) {\r\n    this.setState({ description: event.target.value });\r\n  }\r\n\r\n  ratingChange(event) {\r\n    this.setState({ rating: Math.max(event.target.value, 0) });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content-row\">\r\n        <div className=\"content-row-field space\">\r\n          {!this.state.edit ? (\r\n            <img src={this.state.image} alt={this.state.name} /> \r\n          ) : (\r\n            <input\r\n              type=\"url\"\r\n              value={this.state.image}\r\n              placeholder=\"image URL\"\r\n              onChange={this.imageChange.bind(this)}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"content-row-field space\">\r\n          {!this.state.edit ? (\r\n            this.state.name\r\n          ) : (\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              placeholder=\"Movie name\"\r\n              onChange={this.nameChange.bind(this)}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"content-row-field space\">\r\n          {!this.state.edit ? (\r\n            this.state.description\r\n          ) : (\r\n            <textarea \r\n              type=\"text\"\r\n              value={this.state.description}\r\n              placeholder=\"Movie description\"\r\n              onChange={this.descriptionChange.bind(this)}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"content-row-field space\">\r\n          {!this.state.edit ? (\r\n            this.state.rating\r\n          ) : (\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={this.state.rating}\r\n              onChange={this.ratingChange.bind(this)}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"content-row-field space\">\r\n          <button onClick={this.edit.bind(this)}>{this.state.edit ? \"Save\" : \"Edit\"}</button>\r\n          <button onClick={() => this.props.onRemove(this.props.content.id)}>Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;","import React from 'react'\r\n\r\n\r\nimport './Items.css'\r\nimport data from '../movies.json'\r\nimport Item from '../item/Item'\r\n\r\nclass Items extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: data,\r\n            search: '',\r\n            messageName: \"\",\r\n            messageRating: \"\",\r\n            sortName: false,\r\n            sortRating: false\r\n        };\r\n    }\r\n\r\n    addRow() {\r\n        const items = this.state.items;\r\n        //finding max index. If collection is empty then index is first\r\n        const id = items.length > 0 ? items.reduce((a,b) => a.id > b.id ? a : b).id + 1 : 1;\r\n        items.push({id: id, image: '', name: '', description: '', rating: 0});\r\n        this.setState({items: items});\r\n    }\r\n\r\n    \r\n    saveRow = row => {\r\n        const items = this.state.items;\r\n        items[items.findIndex(item => item.id === row.id)] = row;\r\n        this.setState({items: items});\r\n    }\r\n\r\n\r\n    \r\n    removeRow = id => {\r\n        //creeate new collection without removed item\r\n        this.setState({items: this.state.items.filter(item => item.id !== id)});\r\n    }\r\n\r\n\r\n\r\n    sortByName() {\r\n        const items = this.state.items;\r\n        //if collection is not sorted by name yet first sort ASC, otherwise sort DESC. And Over and over again ASC->DESC\r\n        this.state.sortName ? \r\n            this.setState({items: items.sort((a, b) => (a.name >= b.name) ? -1 : 1)}):\r\n            this.setState({items: items.sort((a, b) => (a.name >= b.name) ? 1 : -1)});\r\n        this.state.sortName ? \r\n            this.setState({ messageName: \"(Z->A)\", messageRating:\"\"}):\r\n            this.setState({ messageName: \"(A->Z)\", messageRating:\"\"});\r\n\r\n        this.setState({sortName: !this.state.sortName, sortRating: false});\r\n    }\r\n\r\n    \r\n    \r\n\r\n    sortByRating() {\r\n        const items = this.state.items;\r\n        //if collection is not sorted by rating yet first sort DESC, otherwise sort ASC. And Over and over again DESC->ASC\r\n        this.state.sortRating ? \r\n            items.sort((a, b) => (a.rating >= b.rating) ? 1 : -1) :\r\n            items.sort((a, b) => (a.rating >= b.rating) ? -1 : 1);\r\n        this.state.sortRating ? \r\n            this.setState({ messageRating: \"(ASC)\", messageName:\"\"}):\r\n            this.setState({ messageRating: \"(DESC)\", messageName:\"\"});\r\n        this.setState(items);\r\n        this.setState({sortRating: !this.state.sortRating, sortName: false });\r\n    }\r\n\r\n    //the searching phrase\r\n    searchChange(event) {\r\n        this.setState({search: event.target.value});\r\n        console.log(this.state.items)\r\n    }\r\n    \r\n\r\n    render() {\r\n        return <div id=\"content\">\r\n                    <div id=\"content-header\">\r\n                        <div className=\"content-header-field\">Image</div>\r\n                        <div className=\"content-header-field cursor\" onClick={() => this.sortByName()}>Name { this.state.messageName }</div>\r\n                        <div className=\"content-header-field\">Description</div>\r\n                        <div className=\"content-header-field cursor\" onClick={() => this.sortByRating()}>Rating { this.state.messageRating }</div>\r\n                        <div className=\"content-header-field\"><input type=\"search\" value={this.state.search} \r\n                            onChange={this.searchChange.bind(this)} placeholder=\"Search\"/></div>\r\n                    </div>\r\n\r\n                {this.state.items.filter(item => item.name.toLowerCase().includes(this.state.search) || item.description.toLowerCase().includes(this.state.search))\r\n                    .map(item => <Item key={item.id} content={item} onRemove={this.removeRow} onSave={this.saveRow}/>)}\r\n                <button id=\"addButton\" onClick={() => this.addRow()}>Add new row</button>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Items;","import React from 'react';\nimport './App.css';\nimport Header from './header/Header'\nimport Items from './items/Items'\n\nclass App extends React.Component {\n  render() {\n    return <div><Header /><Items /></div>\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}